// 트레이트(trait)는, 특정한 타입이 갖고 있으면서 다른 타입과 공유할 수 있는 기능을 정의한다. 트레이트를 사용하면 공통된 기능을 추상적으로 정의할 수 있다.
// 트레이트 바운드를 이용하면 어떤 제네릭 타입 자리에 특정한 동작을 갖춘 타입이 올 수 있음을 명시할 수 있다. 약간의 차이는 있지만, 다른 언어에서 흔히 interface로 부르는 기능과 유사하다.

use trait_2::{Summary, 뉴스기사, 알림, 알림_2, 트윗};

fn main() {
    트레이트_정의하기();
    특정_타입에_트레이트_구현하기();
    기본_구현();
    매개변수로서의_트레이트();
    트레이트를_구현하는_타입을_반환하기();
    트레이트_바운드를_사용해_조건부로_메서드_구현하기();
}

fn 트레이트_정의하기() {
    // 트레이트의 정의는, 메소드 시그니처를 그룹화하여 특정 목적을 달성하는 데 필요한 일련의 동작을 정의하는 것이다.
    pub trait Summary {
        fn summarize(&self) -> String;
    }
    // summarize 메소드가 제공하는 동작으로 구성된, Summary 트레이트.
    // 트레이트를 pub로 선언하여, 이 크레이트에 의존하는 다른 크레이트에서도 트레이트를 사용할 수 있도록 한다.
    // 트레이트 내부에는 이 트레이트를 구현할 타입의 동작을 묘사하는 메소드 시그니처를 선언: 여기서는 summarize 메소드.
    // 트레이트는, 본문에 여러 메소드를 가질 수 있다: 메소드 시그니처는 한 줄에 하나씩 나열되며 각 줄은 세미콜론으로 끝난다.
}

fn 특정_타입에_트레이트_구현하기() {
    let 샘플_트윗 = 트윗 {
        사용자: String::from("horse_ebooks"),
        내용: String::from("of course, as you probably already know, people"),
        댓글: false,
        리트윗: false,
    };

    println!("트윗 1개 도착: {}", 샘플_트윗.요약());
    // 트레이트 구현의 1가지 제약사항: 트레이트 혹은 트레이트를 구현할 타입 둘 중 하나는 반드시 자신의 크레이트 것이어야 해당 타입에 대한 크레이트를 구현할 수 있다는 점이다.
    // ex) trait_2 크레이트의 일부 기능으로 트윗 타입에 표준 라이브러리 트레이트인 Display 등을 구현할 수 있음
    // ex2) trait_2 크레이트에서 Vec<T> 타입에 Summary 트레이트를 구현할 수도 있음.
    // but 외부 타입에 외부 트레이트를 구현할 수는 없음. trait_2 크레이트에서는 Vec<T>에 대한 Display 트레이트를 구현할 수 없음. Vec<T>와 Display 모두 표준 라이브러리에 정의되어있기 때문.
}

fn 기본_구현() {
    // lib.rs 참고
    let 아티클 = 뉴스기사 {
        제목: String::from("프로그래밍 언어 Rust의 특징"),
        소속: String::from("Rust 프로그래밍 언어"),
        저자: String::from("Rustacean"),
        본문: String::from("Rust는 안전하고 빠르며, 실수를 줄이는 프로그래밍 언어입니다."),
    };

    println!("새로운 아티클을 볼 수 있습니다: {}", 아티클.요약());
}

fn 매개변수로서의_트레이트() {
    let 아티클 = 뉴스기사 {
        제목: String::from("프로그래밍 언어 Rust의 특징"),
        소속: String::from("Rust 프로그래밍 언어"),
        저자: String::from("Rustacean"),
        본문: String::from("Rust는 안전하고 빠르며, 실수를 줄이는 프로그래밍 언어입니다."),
    };

    알림(&아티클);
    알림_2(&아티클);
}

fn 트레이트를_구현하는_타입을_반환하기() {
    // lib.rs 참고
}

fn 트레이트_바운드를_사용해_조건부로_메서드_구현하기() {
    // lib.rs 참고
}
