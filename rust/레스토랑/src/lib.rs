// 모듈로 관련된 코드 묶기
// `mod` 키워드와 모듈 이름을 지정하여 모듈을 정의함

mod 접객부서 {
    mod 호스팅 {
        fn 대기하기() {}

        fn 의자에앉기() {}
    }

    mod 서빙 {
        fn 주문받기() {}

        fn 메뉴제공하기() {}

        fn 결제하기() {}
    }
}

fn 고객에게_전달하기() {}

mod 지원부서 {
    fn 잘못된_주문_수정() {
        요리하기();
        super::고객에게_전달하기();
        // super를 사용하면, 부모 모듈에 위치하는 것을 알고 있는 아이템을 참조하도록 해줌
        // 여기서 super는, 루트를 의미함.
        // 지원부서와 고객에게_전달하기 함수는 모듈의 구조가 변경되더라도 관계를 유지할 가능성이 높으므로, super를 사용하면 차후에 모듈 구조가 바뀌더라도 수정해야 할 코드를 줄일 수 있음
    }

    fn 요리하기() {}

    pub struct 아침식사 {
        pub 토스트: String,
        제철과일: String,
    }

    impl 아침식사 {
        pub fn 여름(토스트: &str) -> 아침식사 {
            아침식사 {
                토스트: String::from(토스트),
                제철과일: String::from("복숭아"),
            }
        }
    }

    // 열거형: 내부 variant가 공개되지 않는다면, 큰 쓸모가 없다.
    // 열거형 variant에 대해 하나하나 pub를 붙이는 게 성가신 일이 될 것이므로, 기본적으로 공개이다.
    pub enum 에피타이저 {
        수프,
        샐러드,
    }
}

pub fn 레스토랑에서_식사하기() {
    // 절대 경로: create로 시작함
    crate::접객부서::호스팅::대기하기();

    // 상대 경로: 모듈 이름으로 시작함
    접객부서::호스팅::대기하기();

    // 둘중에 뭘 선택할지는, 상황에 따라 결정하면 됨.
    // ex) 접객부서 모듈을 다른 모듈 내부로 옮겼을 때, 절대 경로인 경우 수정해야함
    // ex2) 레스토링에서_식하가이 함수를 서빙 모듈 내부로 옮겼을 경우, 상대 경로인 경우 수정해야함.

    // 러스트에서 모든 아이템은 부모 모듈에 대해 기본적으로 비공개이기 때문에(왜?),
    // 호스팅 모듈에 대해 pub 키워드를 붙이지 않으면 컴파일에 실패한다.
    // 호스팅을 pub로 바꾸더라도, 호스팅 모듈 내용은 여전히 비공개기 때문에, 내부 함수에 대해서도 똑같이 pub 처리를 해줘야한다.

    // 여기서, '접객부서'에 pub가 붙지 않아도 되는 이유는, 레스토랑에서_식사하기 함수와 접객부서 모듈이 같은 파일에 있기 때문
    // (즉, 같은 모듈 내에 정의되어 있는 형제 관계이기 때문)이다.

    // 구조체
    let mut 식사 = 지원부서::아침식사::여름("호밀 토스트");
    식사.토스트 = String::from("밀 토스트"); // 먹고싶은 식사 바꾸기
    println!("토스트는 이걸 먹을래요: {}", 식사.토스트);
    // 식사.제철과일 = String::from("딸기"); // 과일은 조회, 수정 불가능. private이므로.

    // 열거형
    let 주문1 = 지원부서::에피타이저::수프;
    let 주문2 = 지원부서::에피타이저::샐러드;
}

// crate
//  └── front_of_house
//      ├── hosting
//      │   ├── add_to_waitlist
//      │   └── seat_at_table
//      └── serving
//          ├── take_order
//          ├── serve_order
//          └── take_payment

// 경로를 사용하여 모듈 트리의 아이템 창조하기
